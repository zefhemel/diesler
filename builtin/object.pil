import "object.pil"
import "io.pil"
import "parser.pil"

import diesler
import diesler::exception

DSLClass diesler::builtin::object::init(Scope scope) {
  var object = new DSLClass(scope, null, "Object");

  object.methods["new"] = new diesler::builtin::object::NewInstanceMethod(scope);
  object.methods["defineInstanceMethods:"] = new diesler::builtin::object::DefineMethods(scope, true);
  object.methods["defineMethods:"] = new diesler::builtin::object::DefineMethods(scope, false);
  object.methods["subClass:withMethods:"] = new diesler::builtin::object::SubclassMethod(scope);
  object.methods["importNativeClass:"] = new diesler::builtin::native::NewNativeClassMethod(scope);
  object.instanceMethods["isA:"] = new diesler::builtin::object::IsAMethod(scope);
  object.instanceMethods["import:"] = new diesler::builtin::object::ImportMethod(scope);

  object.instanceMethods["=="] = new diesler::builtin::object::EqMethod(scope);
  object.instanceMethods["!="] = new diesler::builtin::object::NotEqMethod(scope);

  object.instanceMethods["set:to:"] = new diesler::builtin::object::SetFieldMethod(scope);
  object.instanceMethods["get:"] = new diesler::builtin::object::GetFieldMethod(scope);
  object.instanceMethods["describe"] = new diesler::builtin::object::DescribeMethod(scope);
  object.instanceMethods["defineMethods:"] = new diesler::builtin::object::DefineMethods(scope, false);

  object.instanceMethods["print:"] = new diesler::builtin::object::PrintMethod(scope);
  object.instanceMethods["if:then:"] = new diesler::builtin::object::IfThenMethod(scope);
  object.instanceMethods["if:then:else:"] = new diesler::builtin::object::IfThenElseMethod(scope);
  object.instanceMethods["while:do:"] = new diesler::builtin::object::WhileMethod(scope);
  object.instanceMethods["match:against:"] = new diesler::builtin::object::MatchAgainstMethod(scope);
  return object;
}

class diesler::builtin::object::NewInstanceMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "new", new Array<String>(), null) {
    this.cls = cls;
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var obj = new DSLObject(o.as<DSLClass>);
    if(obj.getMethod("init") != null) {
      obj.getMethod("init").invoke(scope, obj, new Array<DSLMethod>());
    }
    return obj;
  }
}

class diesler::builtin::object::SetFieldMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "set:to:", new Array<String>("fieldName", "value"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var fieldName = args[0].as<DSLString>.value;
    o.setField(fieldName, args[1]);
    return o;
  }
}

class diesler::builtin::object::GetFieldMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "get:", new Array<String>("fieldName"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var fieldName = args[0].as<DSLString>.value;
    return o.getField(fieldName);
  }
}

class diesler::builtin::object::DescribeMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "describe", new Array<String>(), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    return new DSLString(scope, o.as<String>);
  }
}

class diesler::builtin::object::PrintMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "print:", new Array<String>("str"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    println(args[0].as<String>);
    return o;
  }
}

class diesler::builtin::object::DefineMethods extends DSLMethod {
  Bool instanceMethods = true;

  new(Scope scope, Bool instanceMethods) extends super(scope, "defineMethods:", new Array<String>("methods"), null) {
    this.instanceMethods = instanceMethods;
  }

  DSLObject invoke(Scope scope, DSLObject self, Array<DSLObject> args) {
    var method = args[0].as<DSLMethod>;
    for(MethodDefTerm mdt : method.block.statements) {
      var newMethod = new DSLMethod(scope, mdt.signature.selector, mdt.signature.arguments, new BlockTerm(scope, mdt.statements));
      if(self instanceof DSLClass && instanceMethods) {
        self.as<DSLClass>.instanceMethods[mdt.signature.selector] = newMethod;
      } else {
        self.methods[mdt.signature.selector] = newMethod;
      }
    }
    return self;
  }
}

class diesler::builtin::object::SubclassMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "subClass:withMethods:", new Array<String>("className", "methods"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject self, Array<DSLObject> args) {
    var className = args[0].as<DSLString>.value;
    var definitions = args[1].as<DSLMethod>; 
    var cls = new DSLClass(scope, self.as<DSLClass>, className);
    for(MethodDefTerm mdt : definitions.block.statements) {
      var newMethod = new DSLMethod(scope, mdt.signature.selector, mdt.signature.arguments, new BlockTerm(scope, mdt.statements));
      cls.instanceMethods[mdt.signature.selector] = newMethod;
    }
    //scope[className] = cls;
    return cls;
  }
}

class diesler::builtin::object::IsAMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "isA:", new Array<String>("class"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject self, Array<DSLObject> args) {
    return new DSLBool(scope, self.isInstanceOf(args[0].as<DSLClass>));
  }
}

class diesler::builtin::object::EqMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "==", new Array<String>("other"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    return new DSLBool(scope, o == args[0]);
  }
}

class diesler::builtin::object::NotEqMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "!=", new Array<String>("other"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    return new DSLBool(scope, !(o == args[0]));
  }
}

class diesler::builtin::object::IfThenMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "if:then:", new Array<String>("condition", "ifTrue"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    verifyType(args[0], typeof DSLMethod);
    verifyType(args[1], typeof DSLMethod);
    DSLMethod cond = args[0].as<DSLMethod>;
    DSLMethod trueBlock = args[1].as<DSLMethod>;
    DSLObject value = cond.invoke(scope, o, new Array<DSLObject>());
    if(!(value instanceof DSLBool)) {
      throw new Exception("Condition should return a Bool: " + cond.as<String>);
    }
    if(value.as<DSLBool>.value) {
      return trueBlock.invoke(scope, o, new Array<DSLObject>());
    }
    return o;
  }
}

class diesler::builtin::object::IfThenElseMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "if:then:else:", new Array<String>("condition", "ifTrue", "ifFalse"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    verifyType(args[0], typeof DSLMethod);
    verifyType(args[1], typeof DSLMethod);
    verifyType(args[2], typeof DSLMethod);
    DSLMethod cond = args[0].as<DSLMethod>;
    DSLMethod trueBlock = args[1].as<DSLMethod>;
    DSLMethod falseBlock = args[2].as<DSLMethod>;
    DSLObject value = cond.invoke(scope, o, new Array<DSLObject>());
    if(!(value instanceof DSLBool)) {
      throw new Exception("Condition should return in bool: " + cond.as<String>);
    }
    if(value.as<DSLBool>.value) {
      return trueBlock.invoke(scope, o, new Array<DSLObject>());
    } else {
      return falseBlock.invoke(scope, o, new Array<DSLObject>());
    }
  }
}

class diesler::builtin::object::WhileMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "while:do:", new Array<String>("condition", "block"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    verifyType(args[0], typeof DSLMethod);
    verifyType(args[1], typeof DSLMethod);
    DSLMethod cond = args[0].as<DSLMethod>;
    DSLMethod block = args[1].as<DSLMethod>;
    DSLObject value = cond.invoke(scope, o, new Array<DSLObject>());
    if(!(value instanceof DSLBool)) {
      throw new Exception("Condition should return in bool: " + cond.as<String>);
    }
    while(value.as<DSLBool>.value) {
      block.invoke(scope, o, new Array<DSLObject>());
      value = cond.invoke(scope, o, new Array<DSLObject>());
    }
    return o;
  }
}

class diesler::builtin::object::MatchAgainstMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "match:against:", new Array<String>("expression", "patternblock"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var expr = args[0];
    for(PatternCaseTerm ptt : args[1].as<DSLMethod>.block.statements) {
      Scope matchScope = new Scope(scope, o);
      if(ptt.match.match(matchScope, expr)) {
        matchScope.evalBlock(ptt.block);
        return o;
      }
    }
    return o;
  }
}

class diesler::builtin::object::ImportMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "import:", new Array<String>("filename"), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var file = new pil::io::ReadFile(args[0].as<DSLString>.value);
    var content = file.readAll();
    file.close();
    BlockTerm block = new Parser(scope, content).acceptStatements();
    return scope.evalBlock(block);
  }
}
