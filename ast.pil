import "object.pil"
import "builtin/list.pil"

import diesler
import diesler::util

String diesler::util::spaces(Int n) {
  var m = new MutableString();
  for(Int i = 0; i < n; i++) {
    m.append("  ");
  }
  return m.as<String>;
}

class diesler::Term extends DSLObject {
  new(DSLObject instanceOf) extends super(instanceOf.as<DSLClass>) {
  }

  String toIndentedString(Int depth) {
    return this.as<String>;
  }
}

class diesler::MessageSendTerm extends diesler::Term {
  Term object = null;
  String selector = null;
  Array<Term> arguments = null;

  new(Scope scope, Term object, String selector, Array<Term> arguments) extends super(scope["ASTMessageSend"]) {
    this.object = object;
    this.selector = selector;
    this.arguments = arguments;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append(spaces(depth));
    s.append("(");
    if(object != null) {
      s.append(object.as<String>);
      s.append(" ");
    }
    s.append(selector);
    var sawCons = false;
    for(Term t: arguments) {
      if(t instanceof MessageSendTerm) {
        s.append("\n");
        sawCons = true;
      } else {
        s.append(' ');
      }
      s.append(t.toIndentedString(depth+1));
    }
    s.append(')');
    return s.as<String>;
  }

  as<String> {
    return toIndentedString(0);
  }
}

class diesler::BlockTerm extends diesler::Term {
  Array<Term> statements = null;

  new(Scope scope, Array<Term> statements) extends super(scope["ASTBlock"]) {
    this.statements = statements;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append("[\n");
    for(Term t : statements) {
      s.append(t.toIndentedString(depth+1));
      s.append('\n');
    }
    s.append(spaces(depth));
    s.append("]");
    return s.as<String>;
  }

  as<String> {
    return toIndentedString(0);
  }
}

class diesler::PatternCaseTerm extends diesler::Term {
  MatchTerm match = null;
  BlockTerm block = null;

  new(Scope scope, MatchTerm match, BlockTerm block) extends super(scope["ASTPatternCase"]) {
    this.match = match;
    this.block = block;
  }

  String toIndentedString(Int depth) {
    return "A pattern case";
  }
}

class diesler::MethodDefTerm extends diesler::Term {
  MethodSignature signature = null;
  Array<Term> statements = null;

  new(Scope scope, MethodSignature signature, Array<Term> statements) extends super(scope["ASTMethodDef"]) {
    this.signature = signature;
    this.statements = statements;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append(signature.as<String>);
    s.append(" [\n");
    for(Term t : statements) {
      s.append(t.toIndentedString(depth+1));
      s.append('\n');
    }
    s.append(spaces(depth));
    s.append("]");
    return s.as<String>;
  }

  as<String> {
    return toIndentedString(0);
  }
}

class diesler::MethodSignature extends diesler::Term {
  String selector = null;
  Array<String> arguments = null;

  new(Scope scope, String selector, Array<String> arguments) extends super(scope["ASTMethodSignature"]) {
    this.selector = selector;
    this.arguments = arguments;
  }
}

class diesler::AssignTerm extends diesler::Term {
  MatchTerm lhs = null;
  Term value = null;

  new(Scope scope, MatchTerm lhs, Term value) extends super(scope["ASTAssignment"]) {
    this.lhs = lhs;
    this.value = value;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append("(=\n");
    s.append(spaces(depth) + lhs.toIndentedString(depth+1) + "\n");
    s.append(spaces(depth) + value.toIndentedString(depth+1));
    s.append(")");
    return s.as<String>;
  }
}

class diesler::ListTerm extends diesler::Term {
  Array<Term> values = null;

  new(Scope scope, Array<Term> values) extends super(scope["ASTList"]) {
    this.values = values;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    for(Term value : values) {
      s.append(value.as<String>);
      if(value != values[values.length-1]) {
        s.append(", ");
      }
    }
    return s.as<String>;
  }
}

class diesler::IntTerm extends diesler::Term {
  Int value = 0;

  new(Scope scope, Int value) extends super(scope["ASTInt"]) {
    this.value = value;
  }

  Bool ==(Object o) {
    if(o == null) {
      return false;
    }
    if(o instanceof IntTerm) {
      return o.as<IntTerm>.value == value;
    } else {
      return false;
    }
  }

  as<String> {
    var ms = new MutableString();
    ms.append(value);
    return ms.as<String>;
  }
}

class diesler::BoolTerm extends diesler::Term {
  Bool value = false;

  new(Scope scope, Bool value) extends super(scope["ASTBool"]) {
    this.value = value;
  }

  as<String> {
    var ms = new MutableString();
    ms.append(value);
    return ms.as<String>;
  }
}

class diesler::StringTerm extends diesler::Term {
  String value = null;

  new(Scope scope, String value) extends super(scope["ASTString"]) {
    this.value = value;
  }

  Bool ==(Object o) {
    if(o == null) {
      return false;
    }
    if(o instanceof StringTerm) {
      return o.as<StringTerm>.value == value;
    } else {
      return false;
    }
  }

  as<String> {
    return "\"" + value + "\"";
  }
}

class diesler::IdnTerm extends diesler::Term {
  String idn = null;

  new(Scope scope, String idn) extends super(scope["ASTIdentifier"]) {
    this.idn = idn;
  }

  as<String> {
    return idn;
  }
}

class diesler::FieldNameTerm extends diesler::Term {
  String fieldName = null;

  new(Scope scope, String fieldName) extends super(scope["ASTFieldName"]) {
    this.fieldName = fieldName;
  }

  as<String> {
    return fieldName;
  }
}

class diesler::MatchTerm extends diesler::Term {
  Term condition = null;

  new(DSLObject cls) extends super(cls) {
  }

  Bool match(Scope scope, DSLObject other) {
    return false;
  }
}

Bool diesler::checkMatch(Scope scope, Term condition, DSLObject object) {
  if(condition == null) {
    return true;
  }
  DSLObject result = scope.createLightSubScope(object).evalExp(condition);
  if(result instanceof DSLBool) {
    return result.as<DSLBool>.value;
  } else {
    return false;
  }
}

class diesler::IdnMatchTerm extends diesler::MatchTerm {
  String idn = null;

  new(Scope scope, String idn) extends super(scope["ASTIdentifierMatch"]) {
    this.idn = idn;
  }

  Bool match(Scope scope, DSLObject other) {
    scope[idn] = other;
    return checkMatch(scope, condition, other);
  }

  as<String> {
    return idn;
  }
}

class diesler::FieldNameMatchTerm extends diesler::MatchTerm {
  String fieldName = null;

  new(Scope scope, String fieldName) extends super(scope["ASTIdentifierMatch"]) {
    this.fieldName = fieldName;
  }

  Bool match(Scope scope, DSLObject other) {
    if(checkMatch(scope, condition, other)) {
      scope.self.setField(fieldName, other);
      return true;
    } else {
      return false;
    }
  }

  as<String> {
    return fieldName;
  }
}

class diesler::ListMatchTerm extends diesler::MatchTerm {
  Array<MatchTerm> items = null;

  new(Scope scope, Array<MatchTerm> items) extends super(scope["ASTListMatch"]) {
    this.items = items;
  }

  Bool match(Scope scope, DSLObject other) {
    if(!(other instanceof DSLList)) {
      return false;
    }
    var l = other.as<DSLList>;
    if(l.items.length != items.length) {
      return false;
    }
    for(Int i = 0; i < items.length; i++) {
      if(!items[i].match(scope, l.items[i])) {
        return false;
      }
    }
    return checkMatch(scope, condition, other);
  }

  as<String> {
    return items.as<String>;
  }
}

class diesler::ObjectMatchTerm extends diesler::MatchTerm {
  String classString = null;
  Array<PropertyMatchTerm> properties = null;

  new(Scope scope, String classString, Array<PropertyMatchTerm> properties) extends super(scope["ASTObjectMatchTerm"]) {
    this.classString = classString;
    this.properties = properties;
  }

  Bool match(Scope scope, DSLObject other) {
    DSLObject tmp = scope[classString];
    DSLClass klass = tmp.as<DSLClass>;
    if(!other.isInstanceOf(klass)) {
      return false;
    }
    for(PropertyMatchTerm pmt : properties) {
      if(other.getMethod(pmt.property) == null) {
        return false;
      }
      var result = other.getMethod(pmt.property).invoke(scope, other, new Array<DSLObject>());
      if(!pmt.pattern.match(scope, result)) {
        return false;
      }
    }
    return checkMatch(scope, condition, other);
  }

  as<String> {
    return properties.as<String>;
  }
}

class diesler::PropertyMatchTerm extends diesler::MatchTerm {
  String property = null;
  MatchTerm pattern = null;

  new(Scope scope, String property, MatchTerm pattern) extends super(scope["ASTPropertyMatch"]) {
    this.property = property;
    this.pattern = pattern;
  }
}

class diesler::LiteralMatchTerm extends diesler::MatchTerm {
  Term value = null;

  new(Scope scope, Term value) extends super(scope["ASTLiteralMatch"]) {
    this.value = value;
  }

  Bool match(Scope scope, DSLObject other) {
    var literalValue = scope.evalExp(value);
    if(literalValue == other) {
      return checkMatch(scope, condition, other);
    } else {
      return false;
    }
  }

  as<String> {
    return value.as<String>;
  }
}
