import "ast.pil"
import "object.pil"
import "builtin/object.pil"
import "builtin/string.pil"
import "builtin/int.pil"
import "builtin/list.pil"
import "builtin/bool.pil"
import "builtin/native.pil"

import diesler
import diesler::exception

void diesler::initInterpreter(Scope scope) {
  scope["Object"] = diesler::builtin::object::init(scope);
  var object = scope["Object"].as<DSLClass>;
  var method = new DSLClass(scope, object, "Method");
  scope["Method"] = object;
  scope["String"] = diesler::builtin::string::init(scope);
  scope["Int"] = diesler::builtin::int::init(scope);
  scope["Bool"] = diesler::builtin::bool::init(scope);
  scope["List"] = diesler::builtin::list::init(scope);
}

class diesler::Scope {
  Scope parent = null;
  DSLObject self = null;
  Map<String, DSLObject> variables = new Map<String, DSLObject>();
  DSLObject returnValue = null;

  new(Scope parent, DSLObject self) {
    this.parent = parent;
    this.self = self;
  }

  DSLObject get(String var) {
    if(var == "self") {
      return self;
    } else if(variables.contains(var)) {
      return variables[var];
    } else if(parent != null) {
      return parent.get(var);
    } else {
      return null;
    }
  }

  void set(String var, DSLObject value) {
    variables[var] = value;
  }

  DSLObject evalBlock(ASTNode stats) {
    if(stats instanceof ASTBlock) {
      DSLObject lastValue = null;
      for(ASTNode t : stats.as<ASTBlock>.statements) {
        lastValue = evalStatement(t);
      }
      return lastValue;
    } else {
      throw new Exception("Can't handle: " + stats.as<String>);
    }
  }

  DSLObject evalStatement(ASTNode stat) {
    if(stat instanceof ASTAssign) {
      var assign = stat.as<ASTAssign>;
      if(!assign.lhs.match(this, evalExp(assign.value))) {
        throw new Exception("Match failed!");
      }
      return null;
    } else {
      return evalExp(stat);
    }
  }

  DSLObject evalExp(ASTNode exp) {
    if(exp instanceof ASTIdn) {
      var value = get(exp.as<ASTIdn>.idn);
      if(value == null) {
        throw new DieslerException("Unknown: " + exp.as<ASTIdn>.idn);
      } else {
        return value;
      }
    } else if(exp instanceof ASTString) {
      return new DSLString(this, exp.as<ASTString>.value);
    } else if(exp instanceof ASTInt) {
      return new DSLInt(this, exp.as<ASTInt>.value);
    } else if(exp instanceof ASTBool) {
      return new DSLBool(this, exp.as<ASTBool>.value);
    } else if(exp instanceof ASTFieldName) {
      return self.getField(exp.as<ASTFieldName>.fieldName);
    } else if(exp instanceof ASTList) {
      var l = new List<DSLObject>();
      for(ASTNode t : exp.as<ASTList>.values) {
        l.add(evalExp(t));
      }
      return new DSLList(this, l);
    } else if(exp instanceof ASTBlock) {
      var m = new DSLMethod(this, "noname", new Array<ASTMatch>(), exp.as<ASTBlock>);
      m.closure = this;
      return m;
    } else if(exp instanceof ASTMessageSend) {
      var ms = exp.as<ASTMessageSend>;
      var o = evalExp(ms.object);
      var args = new Array<DSLObject>(ms.arguments.length);
      for(Int i = 0; i < ms.arguments.length; i++) {
        args[i] = evalExp(ms.arguments[i]);
      }
      if(ms.selector == "return:") {
        returnValue = args[0];
        return returnValue;
      }
      var method = o.getMethod(ms.selector);
      if(method == null) {
        throw new NoSuchMethodException(ms.selector);
      }
      return method.invoke(this, o, args);
    } else {
      throw new Exception("Unsupported expression: " + exp.as<String>);
    }
  }

  Scope createLightSubScope(DSLObject self) {
    var scope = new Scope(this, self);
    scope.variables = variables;
    scope.returnValue = returnValue;
    return scope;
  }
}
