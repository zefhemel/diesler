import "interpreter.pil"
import "ast/ast.pil"

import diesler
import diesler::exception

class diesler::exception::NoSuchFieldException extends Exception { 
  new(String field) extends super(field) {
  }
}

class diesler::exception::DieslerException extends Exception { 
  DSLObject obj = null;

  new(DSLObject obj) extends super(obj.as<String>) {
    this.obj = obj;
  }
}

class diesler::exception::NoSuchMethodException extends Exception {
  new(String method) extends super(method) {
  }
}

class diesler::exception::InvalidArgumentException extends Exception {
  new(String message) extends super(message) {
  }
}

class diesler::DSLObject {
  DSLClass cls = null;
  Map<String, DSLMethod> methods = new Map<String, DSLMethod>();
  Map<String, DSLObject> fields = new Map<String, DSLObject>();

  new(DSLClass cls) {
    this.cls = cls;
  }

  DSLMethod getMethod(String selector) {
    if(methods.contains(selector)) {
      return methods[selector];
    }
    var curCls = this.cls;
    while(curCls != null && !curCls.instanceMethods.contains(selector)) {
      curCls = curCls.superClass;
    }
    if(curCls == null) {
      return null;
    } else {
      return curCls.instanceMethods[selector];
    }
  }

  Bool isInstanceOf(DSLClass checkCls) {
    var cls = this.cls;
    while(cls != null) {
      if(cls == checkCls) {
        return true;
      }
      cls = cls.superClass;
    }
    return false;
  }
  
  DSLObject getField(String name) {
    if(!fields.contains(name)) {
      throw new NoSuchFieldException(name);
    } else {
      return fields[name];
    }
  }

  void setField(String name, DSLObject value) {
    fields[name] = value;
  }

  as<String> {
    if(cls != null) {
      return "Object of type " + cls.name;
    } else {
      return "Object of unkown type";
    }
  }
}

class diesler::DSLClass extends DSLObject {
  DSLClass superClass = null;
  String name = null;
  Map<String, DSLMethod> instanceMethods = new Map<String, DSLMethod>();

  new(Scope scope, DSLClass superClass, String name) extends super(scope["Object"].as<DSLClass>) {
    this.superClass = superClass;
    this.name = name;
  }

  DSLMethod getMethod(String selector) {
    var curCls = this;
    while(curCls != null && !curCls.methods.contains(selector)) {
      curCls = curCls.superClass;
    }
    if(curCls == null) {
      return new DSLObject(cls).getMethod(selector);
    } else {
      return curCls.methods[selector];
    }
  }

  as<String> {
    if(superClass != null) {
      return "Class " + name + ", a subclass of " + superClass.name;
    } else {
      return "Class " + name;
    }
  }
}

class diesler::DSLMethod extends DSLObject {
  Array<ASTMatch> argumentPatterns = null;
  ASTBlock block = null;
  String selector = null;
  Scope closure = null;

  new(Scope scope, String selector, Array<ASTMatch> argumentPatterns, ASTBlock block) extends super(scope["Method"].as<DSLClass>){
    this.argumentPatterns = argumentPatterns;
    this.block = block;
    this.selector = selector;
    this.closure = closure;
  }

  void verifyType(DSLObject o, pil::reflect::Class type) {
    if(o.class != type) {
      throw new InvalidArgumentException("Argument: " + o.as<String> + " is not of type: " + type.qualifiedId);
    }
  }

  DSLObject invoke(Scope scope, DSLObject self, Array<DSLObject> args) {
    Scope localScope = null;
    if(closure != null) {
      localScope = closure.createLightSubScope(self);
    } else {
      localScope = new Scope(scope, self);
    }
    for(Int i = 0; i < argumentPatterns.length; i++) {
      if(!argumentPatterns[i].match(localScope, args[i], true)) {
        throw new DieslerException(new DSLString(scope, "Argument for message " + selector + " did not match pattern."));
      }
      //localScope.variables[argumentNames[i]] = args[i];
    }
    DSLObject rv = block.eval(localScope);
    if(localScope.returnValue != null) {
      return localScope.returnValue;
    } else {
      return rv;
    }
  }

  as<String> {
    return "Method " + selector;
  }
}

class diesler::DSLMethodDefs extends DSLObject {
  Array<ASTMethodDef> declaredMethods = null;

  new(Scope scope, Array<ASTMethodDef> declaredMethods) extends super(scope["MethodDefs"].as<DSLClass>){
    this.declaredMethods = declaredMethods;
  }

  as<String> {
    return "Method defs";
  }
}

class diesler::DSLPatternBlock extends DSLObject {
  Array<ASTPatternCase> patternCases = null;

  new(Scope scope, Array<ASTPatternCase> patternCases) extends super(scope["PatternBlock"].as<DSLClass>){
    this.patternCases = patternCases;
  }

  as<String> {
    return "Method defs";
  }
}
