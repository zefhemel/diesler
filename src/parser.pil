import "ast.pil"
import "interpreter.pil"

import diesler
import diesler::util

class diesler::ParseException extends Exception {
  new(String message) extends super(message) {
  }
}

class diesler::Parser {
  String text = "";
  Int i = 0;
  Scope scope = null;

  Array<Array<String>> operators = new Array<Array<String>>(
    new Array<String>("."),
    new Array<String>("*", "/", "%"),
    new Array<String>("+", "-"),
    new Array<String>("<", "<=", ">", ">=", "==", "!="),
    new Array<String>("!"),
    new Array<String>("&"),
    new Array<String>("|"),
    new Array<String>("?", "$")
    );

  List<Char> allOps = new List<Char>('!', '@', '#', '%', '^', '&', '*', '-', '+', '=', '|', '/', '\\', '<', '>', '.', '?');

  new(Scope scope, String text) {
    this.scope = scope;
    this.text = text;
  }

  ASTNode acceptFactor() {
    var oldI = i;
    var lit = acceptLiteral();
    if(lit != null) {
      return lit;
    }
    var idn = acceptIdn();
    if(idn != null) {
      return new ASTIdn(scope, idn);
    }
    var fn = acceptFieldName();
    if(fn != null) {
      return new ASTFieldName(scope, fn);
    }
    if(accept('(')) {
      acceptWhiteSpace();
      var exp = acceptStatement();
      acceptWhiteSpace();
      if(!accept(')')) {
        i = oldI;
      } else {
        return exp;
      }
    }
    var gr = acceptBlock();
    if(gr != null) {
      return gr;
    }
    var dgr = acceptDeclBlock();
    if(dgr != null) {
      return dgr;
    }
    var mb = acceptMatchBlock();
    if(mb != null) {
      return mb;
    }
    return null;
  }

  ASTNode acceptLiteral() {
    var in = acceptInt();
    if(in != -1) {
      return new ASTInt(scope, in);
    }
    var oldI = i;
    var v = acceptIdn();
    if(v != null) {
      if(v == "true") {
        return new ASTBool(scope, true);
      } else if(v == "false") {
        return new ASTBool(scope, false);
      } else {
        i = oldI;
      }
    }
    var s = acceptString();
    if(s != null) {
      return new ASTString(scope, s);
    }
    return null;
  }

  ASTBlock acceptBlock() {
    var oldI = i;
    acceptWhiteSpace();
    if(accept('{') || accept('[')) {
      acceptAnyWhiteSpace();
      var stats = new List<ASTNode>();
      while(!accept('}') && !accept(']')) {
        var stat = acceptStatement();
        if(stat == null) {
          printRest();
          throw new ParseException("Expected a statement, couln't parse it.");
        }
        stats.add(stat);
        acceptWhiteSpace();
        if(!acceptNewline() && !(lookAhead("]") || lookAhead("}"))) {
          i = oldI;
          return null;
        } else {
          acceptAnyWhiteSpace();
        }
      }
      return new ASTBlock(scope, stats.as<Array<ASTNode>>);
    }
    return null;
  }

  ASTNode acceptDeclBlock() {
    var oldI = i;
    if(accept('{')) {
      acceptAnyWhiteSpace();
      var decls = new List<ASTNode>();
      while(!accept('}')) {
        String postfixMethodname = acceptIdnNoKeyword();
        ASTMethodSignature sig = null;
        if(postfixMethodname != null) {
          sig = new ASTMethodSignature(scope, postfixMethodname, new Array<ASTMatch>());
        } else {
          sig = acceptKeywordMethodSignature();
          if(sig == null) {
            i = oldI;
            return null;
          }
        } 
        acceptWhiteSpace();
        var b = acceptBlock();
        if(b == null) {
          i = oldI;
          return null;
        }
        decls.add(new ASTMethodDef(scope, sig, b.statements));
        acceptAnyWhiteSpace();
      }
      return new ASTBlock(scope, decls.as<Array<ASTNode>>);
    }
    return null;
  }

  ASTNode acceptMatchBlock() {
    var oldI = i;
    if(accept('{')) {
      acceptAnyWhiteSpace();
      var cases = new List<ASTNode>();
      while(!accept('}')) {
        ASTMatch match = acceptPatternWithCondition();
        if(match != null) {
          acceptWhiteSpace();
          if(accept(':')) {
            acceptWhiteSpace();
            ASTBlock block = acceptBlock();
            if(block != null) {
              cases.add(new ASTPatternCase(scope, match, block));
            }
          } else {
            i = oldI;
            return null;
          }
        } else {
          i = oldI;
          return null;
        } 
        acceptAnyWhiteSpace();
      }
      return new ASTBlock(scope, cases.as<Array<ASTNode>>);
    }
    return null;
  }

  ASTMethodSignature acceptKeywordMethodSignature() {
    var selector = new MutableString();
    var args = new List<ASTMatch>();
    acceptWhiteSpace();
    var kw = acceptKeyword();
    while(kw != null) {
      selector.append(kw);
      acceptWhiteSpace();
      ASTMatch arg = acceptPatternWithCondition();
      args.add(arg);
      acceptWhiteSpace();
      kw = acceptKeyword();
    }
    if(args.length > 0) {
      return new ASTMethodSignature(scope, selector.as<String>, args.as<Array<ASTMatch>>);
    } else {
      return null;
    }
  }

  ASTNode acceptGeneric(Int level) {
    ASTNode f = null;
    if(level == 0) {
      f = acceptFactor();
    } else {
      f = acceptGeneric(level-1);
    }
    if(f == null) {
      return null;
    }
    var t = f;
    var oldI = i;
    acceptWhiteSpace();
    var op = acceptOps(operators[level]);
    acceptWhiteSpace();
    while(op != null) {
      ASTNode t2 = null;
      t2 = acceptGeneric(level);
      if(t2 == null) {
        printRest();
        throw new ParseException("Expected an expression.");
      }
      t = new ASTMessageSend(scope, t, op, new Array<ASTNode>(t2));
      oldI = i;
      op = acceptOps(operators[level]);
      acceptWhiteSpace();
    }
    i = oldI;
    return t;
  }

  ASTNode acceptPostfix() {
    var t = acceptGeneric(operators.length-1);
    var oldI = i;
    acceptWhiteSpace();
    var idn = acceptIdnNoKeyword();
    while(idn != null) {
      t = new ASTMessageSend(scope, t, idn, new Array<ASTNode>());
      oldI = i;
      acceptWhiteSpace();
      idn = acceptIdnNoKeyword();
    }
    i = oldI;
    return t;
  }

  ASTNode acceptPostfixNoObject() {
    ASTNode t = null;
    var oldI = i;
    acceptWhiteSpace();
    printRest();
    var idn = acceptIdnNoKeyword();
    while(idn != null) {
      t = new ASTMessageSend(scope, t, idn, new Array<ASTNode>());
      oldI = i;
      acceptWhiteSpace();
      printRest();
      idn = acceptIdnNoKeyword();
    }
    i = oldI;
    return t;
  }

  ASTNode acceptMS() {
    var t = acceptPostfix();
    var selector = new MutableString();
    var args = new List<ASTNode>();
    acceptWhiteSpace();
    var kw = acceptKeyword();
    while(kw != null) {
      selector.append(kw);
      acceptWhiteSpace();
      var arg = acceptPostfix();
      args.add(arg);
      acceptWhiteSpace();
      kw = acceptKeyword();
    }
    if(args.length > 0) {
      return new ASTMessageSend(scope, t, selector.as<String>, args.as<Array<ASTNode>>);
    } else {
      return t;
    }
  }

  ASTNode acceptMSNoObject() {
    var selector = new MutableString();
    var args = new List<ASTNode>();
    acceptWhiteSpace();
    var kw = acceptKeyword();
    while(kw != null) {
      selector.append(kw);
      acceptWhiteSpace();
      var arg = acceptPostfix();
      args.add(arg);
      acceptWhiteSpace();
      kw = acceptKeyword();
    }
    if(args.length > 0) {
      return new ASTMessageSend(scope, null, selector.as<String>, args.as<Array<ASTNode>>);
    } else {
      return null;
    }
  }


  String acceptFieldName() {
    if(accept('@')) {
      return acceptIdn();
    } else {
      return null;
    }
  }

  ASTNode acceptList() {
    acceptWhiteSpace();
    ASTNode t = acceptMS();
    acceptWhiteSpace();
    if(t != null && accept(',')) {
      var items = new List<ASTNode>();
      items.add(t);
      acceptWhiteSpace();
      while(true) {
        t = acceptMS();
        acceptWhiteSpace();
        if(t == null) {
          return new ASTList(scope, items.as<Array<ASTNode>>);
        }
        items.add(t);
        if(!accept(',')) {
          return new ASTList(scope, items.as<Array<ASTNode>>);
        }
        acceptWhiteSpace();
      }
    }
    return t;
  }

  ASTNode acceptExp() {
    acceptWhiteSpace();
    var t = acceptList();
    return t;
  }

  ASTNode acceptAssign() {
    var oldI = i;
    var t = acceptPatternWithCondition();
    acceptWhiteSpace();
    if(accept('=') && !accept('=')) {
      acceptWhiteSpace();
      var e = acceptStatement();
      if(e == null) {
        i = oldI;
        return null;
      }
      return new ASTAssign(scope, t, e);
    } else {
      i = oldI;
      return null;
    }
  }

  ASTMatch acceptPattern() {
    var oldI = i;
    String idn = acceptIdn();
    if(idn != null) {
      acceptWhiteSpace();
      if(accept('[')) { // object pattern
        acceptWhiteSpace();
        var l = new List<ASTPropertyMatch>();
        while(!accept(']')) {
          var property = acceptIdn();
          if(property == null) {
            i = oldI;
            return null;
          }
          acceptWhiteSpace();
          if(accept('=') && accept('>')) {
            acceptWhiteSpace();
            var pattern = acceptPatternWithCondition();
            if(pattern != null) {
              l.add(new ASTPropertyMatch(scope, property, pattern));
              acceptWhiteSpace();
            } else {
              i = oldI;
              return null;
            }
          } else {
            i = oldI;
            return null;
          }
          if(!accept(',') && !lookAhead("]")) {
            i = oldI;
            return null;
          }
          acceptWhiteSpace();
        }
        return new ASTObjectMatch(scope, idn, l.as<Array<ASTPropertyMatch>>);
      } else { // Identifier pattern
        return new ASTIdnMatch(scope, idn);
      }
    }
    ASTNode literal = acceptLiteral();
    if(literal != null) {
      return new ASTLiteralMatch(scope, literal);
    }
    String fieldName = acceptFieldName();
    if(fieldName != null) {
      return new ASTFieldNameMatch(scope, fieldName);
    }
    if(accept('(')) {
      acceptWhiteSpace();
      var l = new List<ASTMatch>();
      while(true) {
        var mt = acceptPatternWithCondition();
        if(mt == null) {
          i = oldI;
          return null;
        }
        l.add(mt);
        acceptWhiteSpace();
        if(accept(')')) {
          return new ASTListMatch(scope, l.as<Array<ASTMatch>>);
        }
        if(!accept(',')) {
          i = oldI;
          return null;
        }
        acceptWhiteSpace();
      }
    }
    return null;
  }

  ASTMatch acceptPatternWithCondition() {
    var p = acceptPattern();
    if(p != null) {
      acceptWhiteSpace();
      if(accept('(')) {
        ASTNode condition = acceptStatement();
        p.condition = condition;
        expect(')');
        acceptWhiteSpace();
      }
      return p;
    } else {
      return null;
    }
  }

  ASTNode acceptStatement() {
    ASTNode t = acceptMSNoObject();
    if(t == null) {
      t = acceptAssign();
      if(t == null) {
        t = acceptExp();
        if(t == null) {
          printRest();
          throw new ParseException("Could not parse exception.");
        }
      }
    } else {
      t.as<ASTMessageSend>.object = new ASTIdn(scope, "self");
    }
    return t;
  }

  ASTBlock acceptStatements() {
    acceptWhiteSpace();
    var stats = new List<ASTNode>();
    while(i < text.length) {
      var exp = acceptStatement();
      stats.add(exp);
      acceptWhiteSpace();
      if(!acceptNewline()) {
        printRest();
        throw new ParseException("new line expected");
      }
    }
    return new ASTBlock(scope, stats.as<Array<ASTNode>>);
  }


  // ---------------------

  Bool acceptWhiteSpace() {
    var oldI = i;
    while(i < text.length && (text[i] == ' ' || text[i] == '\t' || lookAhead("//") || lookAhead("/*"))) { 
      if(lookAhead("//")) {
        while(i < text.length && text[i] != '\n' && text[i] != '\r') {
          i++;
        }
        i--;
      } else if(lookAhead("/*")) {
        while(i < text.length && !lookAhead("*/")) {
          i++;
        }
        if(lookAhead("*/")) {
          i = i + 2;
        }
      } else {
        i++;
      }
    }
    return oldI != i;
  }

  Bool acceptAnyWhiteSpace() {
    var oldI = i;
    while(acceptWhiteSpace() || acceptNewline()) {
    }
    return oldI != i;
  }

  Bool acceptNewline() {
    acceptWhiteSpace();
    var oldI = i;
    while(i < text.length && (text[i] == '\n' || text[i] == '\r' || text[i] == ';')) {
      i++;
      acceptWhiteSpace();
    }
    return i == text.length || oldI != i;
  }

  void printRest() {
    var m = new MutableString();
    for(Int j = i; j < text.length; j++) {
      m.append(text[j]);
    }
    print("Rest: |");
    println(m.as<String>);
  }

  Bool lookAhead(String str) {
    var parsedSomething = false;
    for(Int j = 0; j < str.length && i+j < text.length; j++) {
      if(text[j+i] != str[j]) {
        return false;
      }
      if(i+j+1 == text.length && j+1 < str.length) {
        return false;
      }
      parsedSomething = true;
    }
    return parsedSomething;
  }

  String acceptOps(Array<String> ops) {
    for(String op : ops) {
      if(lookAhead(op)) {
        var opstr = new MutableString(op);
        var oldI = i;
        i = i + op.length;
        while(i < text.length && allOps.contains(text[i])) {
          opstr.append(text[i]);
          i++;
        }
        if(text[i-1] != '=' || opstr.as<String> == op) {
          return opstr.as<String>;
        } else {
          i = oldI;
        }
      }
    }
    return null;
  }

  String acceptKeyword() {
    var oldI = i;
    var idn = acceptIdn();
    if(idn == null) {
      return null;
    } 
    if(accept(':')) {
      return idn + ":";
    } else {
      i = oldI;
      return null;
    }
  }


  Int acceptInt() {
    if(i == text.length) {
      return -1;
    }
    var s = new MutableString();
    if(text[i] >= '0' && text[i] <= '9') {
      while(i < text.length && text[i] >= '0' && text[i] <= '9') {
        s.append(text[i]);
        i++;
      }
      return s.as<Int>;
    } else {
      return -1;
    }
  }

  String acceptString() {
    if(i == text.length) {
      return null;
    }
    var s = new MutableString();
    if(text[i] == '"') {
      i++;
      while(i < text.length && text[i] != '"' && text[i-1] != '\\') {
        if(!(text[i] == '\\' && i < (text.length + 1) && text[i+1] == '"')) {
          s.append(text[i]);
        }
        i = i + 1;
      }
      i = i + 1;
      return s.as<String>;
    } else {
      return null;
    }
  }

  Bool accept(Char c) {
    if(i == text.length) {
      return false;
    }
    if(text[i] == c) {
      i++;
      return true;
    } else {
      return false;
    }
  }

  void expect(Char c) {
    if(i == text.length) {
      print("Rest of the buffer: ");
      printRest();
      throw new ParseException("Expected: " + c.as<String>);
    }
    if(text[i] == c) {
      i++;
    } else {
      print("Rest of the buffer: ");
      printRest();
      throw new ParseException("Expected: " + c.as<String>);
    }
  }

  String acceptIdnNoKeyword() {
    var oldI = i;
    var idn = acceptIdn();
    if(idn != null && !accept(':')) {
      return idn;
    } else {
      i = oldI;
      return null;
    }
  }

  String acceptIdn() {
    if(i == text.length) {
      return null;
    }
    var oldI = i;
    var sym = new MutableString();
    if((text[i] >= 'a' && text[i] <= 'z') || 
                              (text[i] >= 'A' && text[i] <= 'Z') ||
                              (text[i] == '_')) {
      sym.append(text[i]);
      i++;
    } else {
      return null;
    }
    // Read constructor
    while(i < text.length && ((text[i] >= 'a' && text[i] <= 'z') || 
                              (text[i] >= 'A' && text[i] <= 'Z') ||
                              (text[i] >= '0' && text[i] <= '9') ||
                              (text[i] == '_'))) {
      sym.append(text[i]);
      i++;
    }
    return sym.as<String>;
  }
}
