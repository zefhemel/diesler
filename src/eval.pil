// Important: do not import directly!

import "object.pil"
import "builtin/object.pil"
import "builtin/string.pil"
import "builtin/int.pil"
import "builtin/list.pil"
import "builtin/bool.pil"
import "builtin/native.pil"

import diesler::exception

@extend
class diesler::ASTNode extends DSLObject {
}

@extend
class diesler::ASTMessageSend extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    DSLObject methodObj = null; 
    DSLObject targetObj = null; 
    if(object isa ASTIdn && object.as<ASTIdn>.idn == "super") {
      methodObj = scope.self.cls.superClass.getMethod("new").invoke(scope, scope.self.cls.superClass, new Array<DSLObject>());
      targetObj = scope.self;
    } else {
      targetObj = object.eval(scope);
      methodObj = targetObj;
    }
    var args = new Array<DSLObject>(arguments.length);
    DSLMethod method = methodObj.getMethod(selector);
    if(method == null) {
      if(methodObj.getMethod("missing_method:with_args:") != null) {
        args = new Array<DSLObject>(2);
        method = methodObj.getMethod("missing_method:with_args:");
        args[0] = new DSLString(scope, selector);
        var argList = new List<DSLObject>();
        for(Int i = 0; i < arguments.length; i++) {
          argList.add(arguments[i].evalExp(scope));
        }
        args[1] = new DSLList(scope, argList);
      } else {
        throw new NoSuchMethodException(selector);
      }
    } else {
      for(Int i = 0; i < arguments.length; i++) {
        if(method.argumentsLiteral[i]) {
          args[i] = arguments[i];
        } else {
          args[i] = arguments[i].evalExp(scope);
        }
      }
    }
    return method.invoke(scope, targetObj, args);
  }
}

@extend
class diesler::ASTBlock extends diesler::ASTNode {

  DSLObject evalExp(Scope scope) {
    var m = new DSLMethod(scope, "noname", arguments, argumentsLiteral, this);
    m.closure = scope;
    return m;
  }

  DSLObject eval(Scope scope) {
    for(Int i = 0; i < statements.length; i++) {
      if(i == statements.length-1) {
        scope.returnValue = statements[i].eval(scope);
        return scope.returnValue;
      } else {
        statements[i].eval(scope);
        if(scope.hasReturned) {
          return scope.returnValue;
        }
      }
    }
    // Never happens
    return new DSLNull(scope);
  }
}

@extend
class diesler::ASTDeclBlock extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    return new DSLMethodDefs(scope, declaredMethods);
  }
}

@extend
class diesler::ASTPatternBlock extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    return new DSLPatternMethod(scope, patternCases);
  }
}

@extend
class diesler::ASTReturn extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    scope.returnValue = value.eval(scope);
    scope.hasReturned = true;
    return scope.returnValue;
  }
}

@extend
class diesler::ASTAssign extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    if(!lhs.match(scope, value.evalExp(scope), false)) {
      throw new Exception("Match failed!");
    }
    return new DSLNull(scope);
  }
}

@extend
class diesler::ASTLocalAssign extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    if(value == null) { // Just local variable declaration
      if(lhs isa ASTIdnPattern) {
        scope.setLocal(lhs.as<ASTIdnPattern>.idn, null);
        return new DSLNull(scope);
      } else if(lhs isa ASTListPattern) {
        for(ASTPattern m : lhs.as<ASTListPattern>.items) {
          if(m isa ASTIdnPattern) {
            scope.setLocal(m.as<ASTIdnPattern>.idn, null);
          } else {
            throw new DieslerException(new DSLString(scope, "Invalid variable declaration."));
          }
        }
        return new DSLNull(scope);
      } else {
        throw new DieslerException(new DSLString(scope, "Invalid variable declaration."));
      }
    }
    if(!lhs.match(scope, value.evalExp(scope), true)) {
      throw new Exception("Match failed!");
    }
    return new DSLNull(scope);
  }
}

@extend
class diesler::ASTList extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    var l = new List<DSLObject>();
    for(ASTNode t : values) {
      l.add(t.eval(scope));
    }
    return new DSLList(scope, l);
  }
}

@extend
class diesler::ASTInt extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    return new DSLInt(scope, value);
  }
}

@extend
class diesler::ASTBool extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    return new DSLBool(scope, value);
  }
}

@extend
class diesler::ASTString extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    return new DSLString(scope, value);
  }
}

@extend
class diesler::ASTIdn extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    var value = scope.get(idn);
    if(value == null) {
      throw new DieslerException(new DSLString(scope, "Unknown: " + idn));
    } else {
      return value;
    }
  }
}

@extend
class diesler::ASTNull extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    return new DSLNull(scope);
  }
}

@extend
class diesler::ASTFieldName extends diesler::ASTNode {
  DSLObject eval(Scope scope) {
    return scope.self.getField(fieldName);
  }
}
