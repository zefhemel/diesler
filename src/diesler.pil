import "ast/ast.pil"
import "parser.pil"
import "io.pil"
import "interpreter.pil"

import diesler

void main(Array<String> args) {
  String input = null;
  var rootScope = new Scope(null, null);
  initInterpreter(rootScope);
  rootScope.self = new DSLObject(rootScope["Object"].as<DSLClass>);
  if(args.length > 0) {
    var file = new pil::io::ReadFile(args[0]);
    var content = file.readAll();
    file.close();
    var parsed = new Parser(rootScope, content).acceptStatements();
    //new Scope(new DSLObject(diesler::rootNamespace["Object"])).evalBlock(parsed);
    parsed.eval(new Scope(rootScope, new DSLObject(rootScope["Object"].as<DSLClass>)));
  } else {
    println("Welcome to diesler, type :q to quit.");
    var scope = new Scope(rootScope, new DSLObject(rootScope["Object"].as<DSLClass>));
    while(input != ":q") {
      print("> ");
      input = readln();
      if(input != ":q") {
        var block = new Parser(rootScope, input).acceptStatements();
        if(block == null) {
          println("Could not parse.");
        }
        try {
          var result = block.eval(scope);
          if(result != null) {
            if(result.getMethod("asString") != null) {
              println("Result: " + result.getMethod("asString").invoke(scope, result, new Array<DSLObject>()).as<String>);
            } else {
              println("Result: " + result.as<String>);
            }
          }
        } catch(Exception e) {
          println("Error: " + e.as<String>);
        }
      }
    }
  }
}
