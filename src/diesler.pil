import "ast/ast.pil"
import "parser.pil"
import "io.pil"
import "interpreter.pil"

import diesler

void main(Array<String> args) {
  String input = null;
  var rootScope = new Scope(null, null);
  initInterpreter(rootScope);
  rootScope.self = new DSLObject(rootScope["Object"].as<DSLClass>);
  if(args.length > 0) {
    var file = new pil::io::ReadFile(args[0]);
    var content = file.readAll();
    file.close();

    var obj = new DSLObject(rootScope["Object"].as<DSLClass>);
    obj.getMethod("import:").invoke(rootScope, obj, new Array<DSLObject>(new DSLString(rootScope, "stdlib.dsl")));
    var parsed = new Parser(rootScope, content).acceptStatements();
    startBenchmark();
    parsed.eval(new Scope(rootScope, obj));
    var eb = endBenchmark();
    println("That took: " + eb.as<String> + " milliseconds.");
  } else {
    println("Welcome to diesler, type :q to quit.");
    var obj = new DSLObject(rootScope["Object"].as<DSLClass>);
    obj.getMethod("import:").invoke(rootScope, obj, new Array<DSLObject>(new DSLString(rootScope, "stdlib.dsl")));
    var scope = new Scope(rootScope, obj);
    while(input != ":q") {
      print("> ");
      input = readln();
      if(input != ":q") {
        ASTNode block = null;
        try {
          block = new Parser(rootScope, input).acceptStatements();
        } catch(ParseException pe) {
          println(pe);
          block = null;
        }
        if(block == null) {
          println("Could not parse.");
        } else {
          try {
            var result = block.eval(scope);
            if(!(result isa DSLNull) && result != null) {
              if(result.getMethod("asString") != null) {
                println("Result: " + result.getMethod("asString").invoke(scope, result, new Array<DSLObject>()).as<String>);
              } else {
                println("Result: " + result.as<String>);
              }
            }
          } catch(Exception e) {
            println("Error: " + e.as<String>);
          }
        }
      }
    }
  }
}

external void diesler::startBenchmark();
external Int diesler::endBenchmark();
