import "ast/ast.pil"
import "object.pil"
import "builtin/object.pil"
import "builtin/string.pil"
import "builtin/int.pil"
import "builtin/list.pil"
import "builtin/bool.pil"
import "builtin/native.pil"

import diesler
import diesler::exception

void diesler::initInterpreter(Scope scope) {
  scope["Object"] = diesler::builtin::object::init(scope);
  var object = scope["Object"].as<DSLClass>;
  var method = new DSLClass(scope, object, "Method");
  scope["Method"] = object;
  scope["String"] = diesler::builtin::string::init(scope);
  scope["Int"] = diesler::builtin::int::init(scope);
  scope["Bool"] = diesler::builtin::bool::init(scope);
  scope["List"] = diesler::builtin::list::init(scope);
}

class diesler::Scope {
  Scope parent = null;
  DSLObject self = null;
  Map<String, DSLObject> variables = new Map<String, DSLObject>();
  DSLObject returnValue = null;

  new(Scope parent, DSLObject self) {
    this.parent = parent;
    this.self = self;
  }

  DSLObject get(String var) {
    if(var == "self") {
      return self;
    } else if(variables.contains(var)) {
      return variables[var];
    } else if(parent != null) {
      return parent.get(var);
    } else {
      return null;
    }
  }

  void set(String var, DSLObject value) {
    variables[var] = value;
  }

  Scope createLightSubScope(DSLObject self) {
    var scope = new Scope(this, self);
    scope.variables = variables;
    scope.returnValue = returnValue;
    return scope;
  }
}
