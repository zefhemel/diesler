import "ast/ast.pil"
import "object.pil"
import "builtin/object.pil"
import "builtin/string.pil"
import "builtin/int.pil"
import "builtin/list.pil"
import "builtin/bool.pil"
import "builtin/native.pil"
import "builtin/method.pil"
import "builtin/astobject.pil"

import diesler
import diesler::exception

void diesler::initInterpreter(Scope scope) {
  scope.setLocal("Object", diesler::builtin::object::init(scope));
  scope.setLocal("Method", diesler::builtin::method::init(scope));
  scope.setLocal("String", diesler::builtin::string::init(scope));
  scope.setLocal("Int", diesler::builtin::int::init(scope));
  scope.setLocal("Bool", diesler::builtin::bool::init(scope));
  scope.setLocal("List", diesler::builtin::list::init(scope));
  diesler::builtin::ast::init(scope);
  diesler::builtin::ast::initPatterns(scope);
}

class diesler::Scope {
  Scope parent = null;
  DSLObject self = null;
  Map<String, DSLObject> variables = null;
  DSLObject returnValue = null;
  Bool hasReturned = false;

  new(Scope parent, DSLObject self) {
    this.parent = parent;
    this.self = self;
  }

  DSLObject get(String var) {
    if(var == "self") {
      return self;
    } else if(var == "super") {
      if(self.cls != null && self.cls.superClass != null) {
        return new DSLObject(self.cls.superClass);
      } else {
        throw new DieslerException(new DSLString(this, "This class has no super class"));
      }
    } else if(variables != null && variables.contains(var)) {
      return variables[var];
    } else if(parent != null) {
      return parent.get(var);
    } else {
      return null;
    }
  }

  void setLocal(String var, DSLObject value) {
    if(variables == null) {
      variables = new Map<String, DSLObject>();
    }
    variables[var] = value;
  }

  void set(String var, DSLObject value) {
    if(variables == null) {
      variables = new Map<String, DSLObject>();
    }
    var scope = this;
    while(!scope.variables.contains(var) && scope.parent != null) {
      scope = scope.parent;
    }
    if(scope.variables.contains(var)) {
      scope.variables[var] = value;
    } else { // No such variable exists!
      throw new DieslerException(new DSLString(scope, "No such variable declared: " + var));
    }
  }

  Scope createLightSubScope(DSLObject self) {
    var scope = new Scope(this, self);
    scope.variables = variables;
    scope.returnValue = returnValue;
    return scope;
  }
}
