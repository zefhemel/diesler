import "object.pil"
import "builtin/list.pil"

import diesler

Bool diesler::checkMatch(Scope scope, ASTNode condition, DSLObject object) {
  if(condition == null) {
    return true;
  }
  DSLObject result = condition.eval(scope.createLightSubScope(object));
  if(result isa DSLBool) {
    return result.as<DSLBool>.value;
  } else {
    return false;
  }
}

class diesler::ASTPattern extends diesler::ASTNode {
  ASTNode condition = null;

  new(DSLObject cls) extends super(cls) {
  }

  Bool match(Scope scope, DSLObject other, Bool bindLocal) {
    return false;
  }

  String toIndentedString(Int depth) {
    return condition.toIndentedString(depth);
  }
}

class diesler::ASTBindPattern extends diesler::ASTPattern {
  String idn = null;
  ASTPattern pattern = null;

  new(Scope scope, String idn, ASTPattern pattern) extends super(scope["ASTBindPattern"]) {
    this.idn = idn;
    this.pattern = pattern;
  }

  Bool match(Scope scope, DSLObject other, Bool bindLocal) {
    if(pattern.match(scope, other, bindLocal)) {
      if(bindLocal) {
        scope.setLocal(idn, other);
      } else {
        scope[idn] = other;
      }
    } else {
      return false;
    }
    return checkMatch(scope, condition, other);
  }

  String toIndentedString(Int depth) {
    return idn + "@" + pattern.toIndentedString(depth);
  }
}
class diesler::ASTIdnPattern extends diesler::ASTPattern {
  String idn = null;

  new(Scope scope, String idn) extends super(scope["ASTIdentifierPattern"]) {
    this.idn = idn;
  }

  Bool match(Scope scope, DSLObject other, Bool bindLocal) {
    if(bindLocal) {
      scope.setLocal(idn, other);
    } else {
      scope[idn] = other;
    }
    return checkMatch(scope, condition, other);
  }

  String toIndentedString(Int depth) {
    return idn;
  }
}

class diesler::ASTFieldNamePattern extends diesler::ASTPattern {
  String fieldName = null;

  new(Scope scope, String fieldName) extends super(scope["ASTIdentifierPattern"]) {
    this.fieldName = fieldName;
  }

  Bool match(Scope scope, DSLObject other, Bool bindLocal) {
    if(checkMatch(scope, condition, other)) {
      scope.self.setField(fieldName, other);
      return true;
    } else {
      return false;
    }
  }

  String toIndentedString(Int depth) {
    return "@" + fieldName;
  }
}

class diesler::ASTListPattern extends diesler::ASTPattern {
  List<ASTPattern> items = null;

  new(Scope scope, List<ASTPattern> items) extends super(scope["ASTListPattern"]) {
    this.items = items;
  }

  Bool match(Scope scope, DSLObject other, Bool bindLocal) {
    if(!(other isa DSLList)) {
      return false;
    }
    var l = other.as<DSLList>;
    if(l.items.length != items.length) {
      return false;
    }
    for(Int i = 0; i < items.length; i++) {
      if(!items[i].match(scope, l.items[i], bindLocal)) {
        return false;
      }
    }
    return checkMatch(scope, condition, other);
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append('(');
    for(Int i = 0; i < items.length; i++) {
      s.append(items[i].toIndentedString(depth+1));
      if(i != items.length-1) {
        s.append(", ");
      }
    }
    s.append(')');
    return s.as<String>;
  }
}

class diesler::ASTObjectPattern extends diesler::ASTPattern {
  String classString = null;
  List<ASTPropertyPattern> properties = null;

  new(Scope scope, String classString, List<ASTPropertyPattern> properties) extends super(scope["ASTObjectPattern"]) {
    this.classString = classString;
    this.properties = properties;
  }

  Bool match(Scope scope, DSLObject other, Bool bindLocal) {
    DSLObject tmp = scope[classString];
    DSLClass klass = tmp.as<DSLClass>;
    if(!other.isInstanceOf(klass)) {
      return false;
    }
    for(ASTPropertyPattern pmt : properties) {
      if(other.getMethod(pmt.property) == null) {
        return false;
      }
      var result = other.getMethod(pmt.property).invoke(scope, other, new Array<DSLObject>());
      if(!pmt.pattern.match(scope, result, bindLocal)) {
        return false;
      }
    }
    return checkMatch(scope, condition, other);
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append(classString);
    s.append('[');
    for(Int i = 0; i < properties.length; i++) {
      s.append(properties[i].toIndentedString(depth+1));
      if(i != properties.length-1) {
        s.append(", ");
      }
    }
    s.append(']');
    return s.as<String>;
  }
}

class diesler::ASTPropertyPattern extends diesler::ASTPattern {
  String property = null;
  ASTPattern pattern = null;

  new(Scope scope, String property, ASTPattern pattern) extends super(scope["ASTPropertyPattern"]) {
    this.property = property;
    this.pattern = pattern;
  }

  String toIndentedString(Int depth) {
    return property + " => " + pattern.toIndentedString(depth);
  }
}

class diesler::ASTLiteralPattern extends diesler::ASTPattern {
  ASTNode value = null;

  new(Scope scope, ASTNode value) extends super(scope["ASTLiteralPattern"]) {
    this.value = value;
  }

  Bool match(Scope scope, DSLObject other, Bool bindLocal) {
    var literalValue = value.eval(scope);
    if(literalValue == other) {
      return checkMatch(scope, condition, other);
    } else {
      return false;
    }
  }

  String toIndentedString(Int depth) {
    return value.toIndentedString(depth);
  }
}
