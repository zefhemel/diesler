import "interpreter.pil"
import "builtin/list.pil"
import "ast/match.pil"
import "utils.pil"

import diesler
import diesler::util

include "eval.pil"

class diesler::ASTNode extends DSLObject {
  new(DSLObject instanceOf) extends super(instanceOf.as<DSLClass>) {
  }
  DSLObject eval(Scope scope) {
    throw new Exception("Not yet implemented!");
  }

  DSLObject evalExp(Scope scope) {
    return eval(scope);
  }

  String toIndentedString(Int depth) {
    return "unkown";
  }

  as<String> {
    return toIndentedString(0);
  }
}

class diesler::ASTMessageSend extends diesler::ASTNode {
  ASTNode object = null;
  String selector = null;
  List<ASTNode> arguments = null;

  new(Scope scope, ASTNode object, String selector, List<ASTNode> arguments) extends super(scope["ASTMessageSend"]) {
    this.object = object;
    this.selector = selector;
    this.arguments = arguments;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append(object.as<String>);
    s.append(' ');
    var selectorParts = splitWithSeparator(':', selector);
    for(Int i = 0; i < selectorParts.length && i < arguments.length; i++) {
      s.append(selectorParts[i] + " " + arguments[i].as<String> + " ");
    }
    return s.as<String>;
  }
}

class diesler::ASTBlock extends diesler::ASTNode {
  List<ASTPattern> arguments = null;
  List<ASTNode> statements = null;

  new(Scope scope, List<ASTPattern> arguments, List<ASTNode> statements) extends super(scope["ASTBlock"]) {
    this.arguments = arguments;
    this.statements = statements;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append("{\n");
    for(ASTNode statement : statements) {
      s.append(spaces(depth+1) + statement.toIndentedString(depth+1) + "\n");
    }
    s.append(spaces(depth) + "}");
    return s.as<String>;
  }
}

class diesler::ASTDeclBlock extends diesler::ASTNode {
  List<ASTMethodDef> declaredMethods = null;

  new(Scope scope, List<ASTMethodDef> declaredMethods) extends super(scope["ASTDeclBlock"]) {
    this.declaredMethods = declaredMethods;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append("methods{\n");
    for(ASTMethodDef method : declaredMethods) {
      s.append(spaces(depth+1) + method.toIndentedString(depth+1) + "\n");
    }
    s.append(spaces(depth) + "}");
    return s.as<String>;
  }
}

class diesler::ASTPatternBlock extends diesler::ASTNode {
  List<ASTPatternCase> patternCases = null;

  new(Scope scope, List<ASTPatternCase> patternCases) extends super(scope["ASTPatternBlock"]) {
    this.patternCases = patternCases;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append("cases{\n");
    for(ASTPatternCase cs : patternCases) {
      s.append(spaces(depth+1) + cs.toIndentedString(depth+1) + "\n");
    }
    s.append(spaces(depth) + "}");
    return s.as<String>;
  }
}

class diesler::ASTPatternCase extends diesler::ASTNode {
  ASTPattern match = null;
  ASTBlock block = null;

  new(Scope scope, ASTPattern match, ASTBlock block) extends super(scope["ASTPatternCase"]) {
    this.match = match;
    this.block = block;
  }

  String toIndentedString(Int depth) {
    return match.as<String> + " " + block.toIndentedString(depth+1);
  }
}

class diesler::ASTMethodDef extends diesler::ASTNode {
  ASTMethodSignature signature = null;
  List<ASTNode> statements = null;

  new(Scope scope, ASTMethodSignature signature, List<ASTNode> statements) extends super(scope["ASTMethodDef"]) {
    this.signature = signature;
    this.statements = statements;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append(signature.as<String>);
    s.append(" {\n");
    for(ASTNode node : statements) {
      s.append(spaces(depth+1) + node.toIndentedString(depth+1) + "\n");
    }
    s.append(spaces(depth) + "}\n");
    return s.as<String>;
  }
}

class diesler::ASTMethodSignature extends diesler::ASTNode {
  String selector = null;
  List<ASTPattern> arguments = null;

  new(Scope scope, String selector, List<ASTPattern> arguments) extends super(scope["ASTMethodSignature"]) {
    this.selector = selector;
    this.arguments = arguments;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    var selectorParts = splitWithSeparator(':', selector);
    for(Int i = 0; i < selectorParts.length; i++) {
      s.append(selectorParts[i] + " " + arguments[i].as<String> + " ");
    }
    return s.as<String>;
  }
}

class diesler::ASTReturn extends diesler::ASTNode {
  ASTNode value = null;

  new(Scope scope, ASTNode value) extends super(scope["ASTReturn"]) {
    this.value = value;
  }

  String toIndentedString(Int depth) {
    return "return " + value.toIndentedString(depth+1);
  }
}

class diesler::ASTAssign extends diesler::ASTNode {
  ASTPattern lhs = null;
  ASTNode value = null;

  new(Scope scope, ASTPattern lhs, ASTNode value) extends super(scope["ASTAssignment"]) {
    this.lhs = lhs;
    this.value = value;
  }

  String toIndentedString(Int depth) {
    return lhs.as<String> + " = " + value.toIndentedString(depth+1);
  }
}

class diesler::ASTLocalAssign extends diesler::ASTNode {
  ASTPattern lhs = null;
  ASTNode value = null;

  new(Scope scope, ASTPattern lhs, ASTNode value) extends super(scope["ASTAssignment"]) {
    this.lhs = lhs;
    this.value = value;
  }

  String toIndentedString(Int depth) {
    return "local " + lhs.as<String> + " = " + value.toIndentedString(depth+1);
  }
}

class diesler::ASTList extends diesler::ASTNode {
  List<ASTNode> values = null;

  new(Scope scope, List<ASTNode> values) extends super(scope["ASTList"]) {
    this.values = values;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append('(');
    for(Int i = 0; i < values.length; i++) {
      s.append(values[i].toIndentedString(depth+1));
      if(i != values.length-1) {
        s.append(", ");
      }
    }
    s.append(')');
    return s.as<String>;
  }
}

class diesler::ASTInt extends diesler::ASTNode {
  Int value = 0;

  new(Scope scope, Int value) extends super(scope["ASTInt"]) {
    this.value = value;
  }

  Bool ==(Object o) {
    if(o == null) {
      return false;
    }
    if(o isa ASTInt) {
      return o.as<ASTInt>.value == value;
    } else {
      return false;
    }
  }

  String toIndentedString(Int depth) {
    return value.as<String>;
  }
}

class diesler::ASTBool extends diesler::ASTNode {
  Bool value = false;

  new(Scope scope, Bool value) extends super(scope["ASTBool"]) {
    this.value = value;
  }

  String toIndentedString(Int depth) {
    return value.as<String>;
  }
}

class diesler::ASTString extends diesler::ASTNode {
  String value = null;

  new(Scope scope, String value) extends super(scope["ASTString"]) {
    this.value = value;
  }

  Bool ==(Object o) {
    if(o == null) {
      return false;
    }
    if(o isa ASTString) {
      return o.as<ASTString>.value == value;
    } else {
      return false;
    }
  }

  String toIndentedString(Int depth) {
    return "\"" + value + "\"";
  }
}

class diesler::ASTIdn extends diesler::ASTNode {
  String idn = null;

  new(Scope scope, String idn) extends super(scope["ASTIdentifier"]) {
    this.idn = idn;
  }

  String toIndentedString(Int depth) {
    return idn;
  }
}

class diesler::ASTNull extends diesler::ASTNode {
  new(Scope scope) extends super(scope["ASTNull"]) {
  }

  String toIndentedString(Int depth) {
    return "null";
  }
}

class diesler::ASTFieldName extends diesler::ASTNode {
  String fieldName = null;

  new(Scope scope, String fieldName) extends super(scope["ASTFieldName"]) {
    this.fieldName = fieldName;
  }

  String toIndentedString(Int depth) {
    return "@" + fieldName;
  }
}

