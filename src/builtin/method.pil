import "object.pil"
import "objectutils.pil"

import diesler
import diesler::exception

DSLClass diesler::builtin::method::init(Scope scope) {
  var method = new DSLClass(scope, scope["Object"].as<DSLClass>, "Method");
  method.setInstanceMethod("invoke:on:", new diesler::builtin::method::InvokeOnMethod(scope));
  method.setInstanceMethod("invoke:", new diesler::builtin::method::InvokeWithArgsMethod(scope));
  method.setInstanceMethod("invoke", new diesler::builtin::method::InvokeMethod(scope));
  addProperty(scope, method, "selector");
  addProperty(scope, method, "block");
  return method;
}

class diesler::builtin::method::InvokeOnMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "invoke:on:", new List<ASTPattern>(new ASTIdnPattern(scope, "argList"), new ASTIdnPattern(scope, "self")), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var m = o.as<DSLMethod>;
    var arguments = args[0].as<DSLList>;
    var self = args[1];
    return m.invoke(scope, self, arguments.items.as<Array<DSLObject>>);
  }
}

class diesler::builtin::method::InvokeWithArgsMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "invoke:", new List<ASTPattern>(new ASTIdnPattern(scope, "argList")), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var m = o.as<DSLMethod>;
    var self = scope.self;
    var arguments = args[0].as<DSLList>;
    return m.invoke(scope, self, arguments.items.as<Array<DSLObject>>);
  }
}

class diesler::builtin::method::InvokeMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "invoke", new List<ASTPattern>(), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var m = o.as<DSLMethod>;
    var self = scope.self;
    return m.invoke(scope, self, new Array<DSLObject>());
  }
}
