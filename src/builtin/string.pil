import "object.pil"

import diesler
import diesler::exception

class diesler::DSLString extends DSLObject {
  String value = null;

  new(Scope scope, String value) extends super(scope["String"].as<DSLClass>) {
    this.value = value;
  }

  as<String> {
    return value;
  }

  Bool ==(Object other) {
    if(other == null) {
      return false;
    }
    if(other instanceof DSLString) {
      return value == other.as<DSLString>.value;
    } else {
      return false;
    }
  }
}

DSLClass diesler::builtin::string::init(Scope scope) {
  var string = new DSLClass(scope, scope["Object"].as<DSLClass>, "String");
  string.instanceMethods["+"] = new diesler::builtin::string::StringConcatMethod(scope);
  return string;
}

class diesler::builtin::string::StringConcatMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "+", new Array<ASTMatch>(new ASTIdnMatch(scope, "str")), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    return new DSLString(scope, o.as<DSLString>.value + args[0].as<DSLString>.value);
  }
}

