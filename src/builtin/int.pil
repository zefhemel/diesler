import "object.pil"

import diesler
import diesler::exception

class diesler::DSLInt extends DSLObject {
  Int value = 0;

  new(Scope scope, Int value) extends super(scope["Int"].as<DSLClass>) {
    this.value = value;
  }

  as<String> {
    return value.as<String>;
  }

  Bool ==(Object other) {
    if(other == null) {
      return false;
    }
    if(other isa DSLInt) {
      return value == other.as<DSLInt>.value;
    } else {
      return false;
    }
  }
}

DSLClass diesler::builtin::int::init(Scope scope) {
  var int = new DSLClass(scope, scope["Object"].as<DSLClass>, "Int");
  int.setInstanceMethod("+", new diesler::builtin::int::AddMethod(scope));
  int.setInstanceMethod("-", new diesler::builtin::int::SubstractMethod(scope));
  int.setInstanceMethod("*", new diesler::builtin::int::MultiplyMethod(scope));
  int.setInstanceMethod("/", new diesler::builtin::int::DivMethod(scope));
  int.setInstanceMethod("%", new diesler::builtin::int::ModMethod(scope));

  int.setInstanceMethod("<", new diesler::builtin::int::LessThanMethod(scope));
  int.setInstanceMethod(">", new diesler::builtin::int::GreaterThanMethod(scope));
  return int;
}

class diesler::builtin::int::AddMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "+", new List<ASTPattern>(new ASTIdnPattern(scope, "other")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    return new DSLInt(scope, o.as<DSLInt>.value + args[0].as<DSLInt>.value);
  }
}

class diesler::builtin::int::SubstractMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "-", new List<ASTPattern>(new ASTIdnPattern(scope, "other")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    return new DSLInt(scope, o.as<DSLInt>.value - args[0].as<DSLInt>.value);
  }
}

class diesler::builtin::int::MultiplyMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "*", new List<ASTPattern>(new ASTIdnPattern(scope, "other")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    return new DSLInt(scope, o.as<DSLInt>.value * args[0].as<DSLInt>.value);
  }
}

class diesler::builtin::int::DivMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "/", new List<ASTPattern>(new ASTIdnPattern(scope, "other")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    return new DSLInt(scope, o.as<DSLInt>.value / args[0].as<DSLInt>.value);
  }
}

class diesler::builtin::int::ModMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "%", new List<ASTPattern>(new ASTIdnPattern(scope, "other")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    return new DSLInt(scope, o.as<DSLInt>.value % args[0].as<DSLInt>.value);
  }
}

class diesler::builtin::int::LessThanMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "<", new List<ASTPattern>(new ASTIdnPattern(scope, "other")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    return new DSLBool(scope, o.as<DSLInt>.value < args[0].as<DSLInt>.value);
  }
}

class diesler::builtin::int::GreaterThanMethod extends DSLMethod {
  new(Scope scope) extends super(scope, ">", new List<ASTPattern>(new ASTIdnPattern(scope, "other")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    return new DSLBool(scope, o.as<DSLInt>.value > args[0].as<DSLInt>.value);
  }
}
