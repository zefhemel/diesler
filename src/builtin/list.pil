import "object.pil"
import "objectutils.pil"

import diesler
import diesler::util
import diesler::exception

class diesler::DSLList extends DSLObject {
  List<DSLObject> items = null;

  new(Scope scope, List<DSLObject> items) extends super(scope["List"].as<DSLClass>) {
    this.items = items;
  }

  as<String> {
    var s = new MutableString("(");
    for(Int i = 0; i < items.length; i++) {
      s.append(items[i].as<String>);
      if(i < items.length-1) {
        s.append(", ");
      }
    }
    s.append(')');
    return s.as<String>;
  }
}

DSLClass diesler::builtin::list::init(Scope scope) {
  var list = new DSLClass(scope, scope["Object"].as<DSLClass>, "List");
  list.setInstanceMethod("add:", new diesler::builtin::list::AddMethod(scope));
  list.setInstanceMethod("add:at:", new diesler::builtin::list::AddAtMethod(scope));
  list.setInstanceMethod("remove:", new diesler::builtin::list::RemoveMethod(scope));
  list.setInstanceMethod("removeAt:", new diesler::builtin::list::RemoveAtMethod(scope));
  list.setInstanceMethod("contains:", new diesler::builtin::list::ContainsMethod(scope));
  list.setInstanceMethod("get:", new diesler::builtin::list::GetMethod(scope));
  list.setInstanceMethod("length", new diesler::builtin::list::LengthMethod(scope));
  //list.setInstanceMethod("each:", new diesler::builtin::list::EachMethod(scope));
  setNewMethod(scope, list, DSLObject(DSLClass instanceOf) { 
    var o = new DSLList(scope, new List<DSLObject>()); 
    o.cls = instanceOf; 
    o 
  });
  

  list.setInstanceMethod("==", new diesler::builtin::list::EqualsMethod(scope));
  return list;
}

class diesler::builtin::list::AddMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "add:", new List<ASTPattern>(new ASTIdnPattern(scope, "item")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    l.items.add(args[0]);
    return o;
  }
}

class diesler::builtin::list::AddAtMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "add:at:", new List<ASTPattern>(new ASTIdnPattern(scope, "item"), new ASTIdnPattern(scope, "index")), new List<Bool>(false, false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    l.items.insertAt(args[1].as<DSLInt>.value, args[0]);
    return o;
  }
}

class diesler::builtin::list::RemoveMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "remove:", new List<ASTPattern>(new ASTIdnPattern(scope, "item")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    l.items.remove(args[0]);
    return o;
  }
}

class diesler::builtin::list::RemoveAtMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "removeAt:", new List<ASTPattern>(new ASTIdnPattern(scope, "index")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    l.items.removeAt(args[0].as<DSLInt>.value);
    return o;
  }
}

class diesler::builtin::list::ContainsMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "contains:", new List<ASTPattern>(new ASTIdnPattern(scope, "item")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    return new DSLBool(scope, l.items.contains(args[0]));
  }
}

class diesler::builtin::list::GetMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "get:", new List<ASTPattern>(new ASTIdnPattern(scope, "index")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    return l.items[args[0].as<DSLInt>.value];
  }
}

class diesler::builtin::list::LengthMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "length", new List<ASTPattern>(), new List<Bool>(), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    return new DSLInt(scope, l.items.length);
  }
}

class diesler::builtin::list::EachMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "each:", new List<ASTPattern>(new ASTIdnPattern(scope, "block")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    DSLMethod m = args[0].as<DSLMethod>;
    for(DSLObject obj : o.as<DSLList>.items) {
      m.invoke(scope, scope.self, new Array<DSLObject>(obj));
    }
    return new DSLNull(scope);
  }
}

class diesler::builtin::list::EqualsMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "==", new List<ASTPattern>(new ASTIdnPattern(scope, "other")), new List<Bool>(false), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    var l2 = args[0].as<DSLList>;
    return new DSLBool(scope, l.items == l2.items);
  }
}
