import "object.pil"

import diesler
import diesler::exception

class diesler::DSLList extends DSLObject {
  List<DSLObject> items = null;

  new(Scope scope, List<DSLObject> items) extends super(scope["List"].as<DSLClass>) {
    this.items = items;
  }

  as<String> {
    var s = new MutableString("(");
    for(Int i = 0; i < items.length; i++) {
      s.append(items[i].as<String>);
      if(i < items.length-1) {
        s.append(", ");
      }
    }
    s.append(')');
    return s.as<String>;
  }
}

DSLClass diesler::builtin::list::init(Scope scope) {
  var list = new DSLClass(scope, scope["Object"].as<DSLClass>, "Int");
  list.instanceMethods["add:"] = new diesler::builtin::list::AddMethod(scope);
  list.instanceMethods["remove:"] = new diesler::builtin::list::RemoveMethod(scope);
  list.instanceMethods["contains:"] = new diesler::builtin::list::ContainsMethod(scope);
  list.instanceMethods["get:"] = new diesler::builtin::list::GetMethod(scope);
  list.instanceMethods["length"] = new diesler::builtin::list::LengthMethod(scope);

  list.instanceMethods["=="] = new diesler::builtin::list::EqualsMethod(scope);
  return list;
}

class diesler::builtin::list::AddMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "add:", new Array<ASTMatch>(new ASTIdnMatch(scope, "item")), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    l.items.add(args[0]);
    return o;
  }
}

class diesler::builtin::list::RemoveMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "remove:", new Array<ASTMatch>(new ASTIdnMatch(scope, "item")), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    l.items.remove(args[0]);
    return o;
  }
}

class diesler::builtin::list::ContainsMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "contains:", new Array<ASTMatch>(new ASTIdnMatch(scope, "item")), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    return new DSLBool(scope, l.items.contains(args[0]));
  }
}

class diesler::builtin::list::GetMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "get:", new Array<ASTMatch>(new ASTIdnMatch(scope, "index")), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    return l.items[args[0].as<DSLInt>.value];
  }
}

class diesler::builtin::list::LengthMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "length", new Array<ASTMatch>(), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    return new DSLInt(scope, l.items.length);
  }
}

class diesler::builtin::list::EqualsMethod extends DSLMethod {
  new(Scope scope) extends super(scope, "==", new Array<ASTMatch>(new ASTIdnMatch(scope, "other")), null) {
  }

  DSLObject invoke(Scope scope, DSLObject o, Array<DSLObject> args) {
    var l = o.as<DSLList>;
    var l2 = args[0].as<DSLList>;
    return new DSLBool(scope, l.items == l2.items);
  }
}
